using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;
using Microsoft.Xna.Framework.Audio;
using System;

namespace Abysswalker
{
    // ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°
    public class Button : DrawableGameComponent
    {
        private Texture2D buttonTexture;
        public Rectangle buttonRect; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô public ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ
        private Vector2 position;
        private Vector2 size;

        public Button(Game game, string image, Vector2 position, Vector2 size) : base(game)
        {
            this.position = position;
            this.size = size;
            this.buttonTexture = Game.Content.Load<Texture2D>(image);
            this.buttonRect = new Rectangle((int)position.X, (int)position.Y, (int)size.X, (int)size.Y);
        }

        public void Update(GameTime gameTime, MouseState mouseState)
        {
            if (buttonRect.Contains(mouseState.Position))
            {
                // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏û‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏ô
            }
        }

        public override void Draw(GameTime gameTime)
        {
            SpriteBatch spriteBatch = (SpriteBatch)Game.Services.GetService(typeof(SpriteBatch));
            spriteBatch.Begin();
            spriteBatch.Draw(buttonTexture, buttonRect, Color.White);
            spriteBatch.End();
            base.Draw(gameTime);
        }
    }

    // ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    public class Text : DrawableGameComponent
    {
        private SpriteFont font;  // ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        private string text;      // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
        private Vector2 position; // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        private Color color;      // ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°

        // ‡∏Ñ‡∏≠‡∏ô‡∏™‡∏ï‡∏£‡∏±‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°, ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á, ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå, ‡πÅ‡∏•‡∏∞‡∏™‡∏µ
        public Text(Game game, string text, Vector2 position, int size, Color color) : base(game)
        {
            this.text = text;
            this.position = position;
            this.color = color;
            this.font = Game.Content.Load<SpriteFont>("PixelFont"); // ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å Content
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
        public override void Draw(GameTime gameTime)
        {
            SpriteBatch spriteBatch = (SpriteBatch)Game.Services.GetService(typeof(SpriteBatch)); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SpriteBatch ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î
            spriteBatch.Begin();
            spriteBatch.DrawString(font, text, position, color); // ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            spriteBatch.End();
            base.Draw(gameTime);
        }
    }

    // ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°
    public class MainMenu : DrawableGameComponent // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô DrawableGameComponent
    {
        private Button playButton;
        private Button exitButton;
        private Text titleText;
        private Text subtitleText;
        private Song menuMusic;

        // üî∏ ‡πÄ‡∏û‡∏¥‡πà‡∏° callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
        private Action<int, int> createOverworldCallback;

        // üî∏ ‡∏õ‡∏£‡∏±‡∏ö constructor ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö callback
        public MainMenu(Game game, Action<int, int> createOverworldCallback) : base(game)
        {
            this.createOverworldCallback = createOverworldCallback;

            menuMusic = Game.Content.Load<Song>("menu_music");
            MediaPlayer.Play(menuMusic);
            MediaPlayer.IsRepeating = true;

            playButton = new Button(game, "play_button_non_active", new Vector2(400, 300), new Vector2(400, 200));
            exitButton = new Button(game, "exit_button_non_active", new Vector2(400, 600), new Vector2(400, 200));
            titleText = new Text(game, "UNDERWATER", new Vector2(400, 100), 110, Color.Green);
            subtitleText = new Text(game, "ADVENTURE", new Vector2(400, 250), 110, Color.Green);
        }


        public override void Update(GameTime gameTime)
        {
            MouseState mouseState = Mouse.GetState();
            playButton.Update(gameTime, mouseState);
            exitButton.Update(gameTime, mouseState);

            if (mouseState.LeftButton == ButtonState.Pressed)
            {
                if (playButton.buttonRect.Contains(mouseState.Position))
                {
                    createOverworldCallback?.Invoke(0, 1);
                }
                else if (exitButton.buttonRect.Contains(mouseState.Position))
                {
                    Game.Exit();
                }
            }

            base.Update(gameTime);
        }

        public override void Draw(GameTime gameTime)
        {
            SpriteBatch spriteBatch = (SpriteBatch)Game.Services.GetService(typeof(SpriteBatch));
            spriteBatch.Begin();
            titleText.Draw(gameTime);
            subtitleText.Draw(gameTime);
            playButton.Draw(gameTime);
            exitButton.Draw(gameTime);
            spriteBatch.End();
            base.Draw(gameTime);
        }
    }
}
